package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.memberVO;
import service.MemberService;
import service.MemberServiceImpl;


@WebServlet("/memb/*")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(MemberController.class);
	private RequestDispatcher rdp;
	private String destPage="";
	private int isOk;
	private MemberService msv;
	
    public MemberController() {
    	msv = new MemberServiceImpl();
    }

	
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//실행
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String uri = request.getRequestURI();
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info(path);
		
		switch(path) {
		case "join":
			destPage="/member/join.jsp";
			break;
		case "register":
			try {
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				String email = request.getParameter("email");
				int age = Integer.parseInt(request.getParameter("age"));
				String phone = request.getParameter("phone");
				
				memberVO mvo = new memberVO(id, pwd, email, age, phone);
				int isOk = msv.register(mvo);
				log.info("isOk>>>>>{}", isOk);
				destPage="/index.jsp";
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "login":
			try {				
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				memberVO mvo = new memberVO(id,pwd);
				log.info(">>> {} ", mvo);
				memberVO loginmvo = msv.login(mvo);
				log.info(">>> {} ", loginmvo);
				if(loginmvo!=null) {
					HttpSession ses = request.getSession();
					ses.setAttribute("ses", loginmvo);
					ses.setMaxInactiveInterval(10*60);
				} else {
					request.setAttribute("msg_login", -1);
				}
				destPage="/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "logout":
			try {
				HttpSession ses = request.getSession();
				
				memberVO mvo = (memberVO) ses.getAttribute("ses");
				int isOk = msv.lastLogin(mvo.getId());
				ses.invalidate();//세션끊기
				destPage="/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "modify":
			destPage="/member/modify.jsp";
			break;
		case "update":
			try {
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				String email = request.getParameter("email");
				int age = Integer.parseInt(request.getParameter("age"));
				String phone = request.getParameter("phone");
				memberVO mvo = new memberVO(id,pwd, email, age, phone);
				int isOk = msv.update(mvo);
				log.info("update isOk>>>>>{}", isOk);
				if(isOk>0) {
					request.setAttribute("msg_modify", 1);
					HttpSession ses = request.getSession();
					ses.invalidate();
					destPage = "/index.jsp";
				} else {
					request.setAttribute("msg_modify", -1);
					destPage = "modify";
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "list":
			try {
				List<memberVO> list = msv.getList();
				request.setAttribute("list", list);
				log.info("list isOk>>>>>{}", list);
				destPage = "/member/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "delete":
			try {
				HttpSession ses = request.getSession();
				String id = ((memberVO)ses.getAttribute("ses")).getId();
				int isOk = msv.remove(id);
				log.info("delete isOk>>>>>{}", isOk);
				if(isOk>0) {
					ses.invalidate();
					destPage="/index.jsp";
				} else {
					destPage = "modify";
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		}
		
		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request,response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request,response);
	}

}
